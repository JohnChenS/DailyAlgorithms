/**
 * @author John Chen
 * @Date 20201030
 */
public class StrangeEquation {
    /*
    2014年第五届蓝桥杯省赛试题及详解（Java本科B组）第六题
    算法难度：*            (暴力破解)
    编程注意点：*****      (判断里把除法手动转成乘法！！！)

    题目：
        上小学的时候，小明经常自己发明新算法。一次，老师出的题目是：
        1/4 乘以 8/5
        小明居然把分子拼接在一起，分母拼接在一起，答案是：18/45 （参见图1.png）
        老师刚想批评他，转念一想，这个答案凑巧也对啊，真是见鬼！
        对于分子、分母都是 1~9 中的一位数的情况，还有哪些算式可以这样计算呢？
        请写出所有不同算式的个数（包括题中举例的）。
        显然，交换分子分母后，例如：4/1 乘以 5/8 是满足要求的，这算做不同的算式。
        但对于分子分母相同的情况，2/2 乘以 3/3 这样的类型太多了，不在计数之列!
        注意：答案是个整数（考虑对称性，肯定是偶数）。请通过浏览器提交。不要书写多余的内容。
     */

    public static int strangeE(){
        int sum = 0;
        for (int i = 1; i < 10; i++) {
            for (int j = 1; j < 10; j++) {
                for (int k = 1; k < 10; k++) {
                    for (int l = 1; l < 10; l++) {
                        if(( i == j)||( k == l))
                            continue;
                        /*
                        注意：以下这一步，为整算法的关键
                        你需要做的，就是把 (i/j) * (k/l) = (i*10+k) / (j*10+l)在纸上自己转成乘法
                        绝对！绝对！绝对！不要出现除法，像下段注释那么写！
                        */
                        else if((i * k * (j * 10 + l)) == ( j * l *( i * 10 + k)))
                            sum++;
                        /*
                        千万别向下面这么写代码，关于int、double的除法，并不是想象中的那么运算
                        除法会涉及到二进制运算，导致位数不精确，在程序里面结果直接被大约化
                        假如用下面的代码运行（前提还要把前面四个for里的所有int改成double），结果是12个。
                        else{
                            double e1 = i / j;
                            double e2 = k / l;
                            double sE = ((i * 10) + k) / ((j * 10) + l);
                            if ((e1* e2) == sE)
                                sum++;
                        }
                        */
                    }
                }
            }
        }
        return sum;
    }

    public static void main(String[] args) {

        System.out.println("奇怪的算式一共有：" + strangeE() + " 个..." );

    }
}
